name: tests

on:
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: neuroinformatics-unit/actions/lint@v2

  manifest:
    name: Check manifest
    runs-on: ubuntu-latest
    steps:
      - uses: neuroinformatics-unit/actions/check_manifest@v2

  test:
    needs: [linting, manifest]
    name: ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Run tests on ubuntu across all supported versions
        python-version: ["3.9", "3.10"]
        os: [ubuntu-latest]
        # Include a Windows test and old/new Mac runs
        include:
          - os: macos-13
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.10"
    steps:
      # Cache the tensorflow model so we don't have to remake it every time
      - name: Cache tensorflow model
        uses: actions/cache@v3
        with:
          path: "~/.cellfinder"
          key: models-${{ hashFiles('~/.cellfinder/**') }}
      # install additional Macos dependencies
      - name: install HDF5 libraries (needed on M1 Macs only)
        if: matrix.os == 'macos-latest'
        run: |
          brew install hdf5
      # Run tests
      - uses: neuroinformatics-unit/actions/test@v2
        with:
          python-version: ${{ matrix.python-version }}
          secret-codecov-token: ${{ secrets.CODECOV_TOKEN }}

  benchmarks:
    name: Check benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        shell: bash
        run: |
          python -mpip install --upgrade pip
          python -mpip install .[asv_version]
      - name: Run asv check
        shell: bash
        run: asv check -v -E existing

  build_sdist_wheels:
    name: Build source distribution
    needs: [test]
    if: github.event_name == 'push' && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    steps:
      - uses: neuroinformatics-unit/actions/build_sdist_wheels@v2

  upload_all:
    name: Publish build distributions
    needs: [build_sdist_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref_type == 'tag'
    steps:
    - uses: neuroinformatics-unit/actions/upload_pypi@v2
      with:
        secret-pypi-key: ${{ secrets.TWINE_API_KEY }}
