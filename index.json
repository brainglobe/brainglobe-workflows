{"project": "brainglobe-workflows", "project_url": "https://github.com/brainglobe/brainglobe-workflows", "show_commit_url": "https://github.com/brainglobe/brainglobe-workflows/commit/", "hash_length": 8, "revision_to_hash": {"23": "352b85652dab3f1059430668b7bbced32f587146", "24": "13a7bef9f6b8462d4331ff8ae418c59e80fad48a", "30": "49c3fdd456b375d4556985d8f37aeb9d58bdf4fc", "34": "a62766104e2c503ac911c1c90e3ca547a9367835", "35": "9b0d5a86ed4439c821480554fd9983734cbdb371", "37": "ac0e6cd98e6054aa62dbf3fb254661e81f358ef4", "41": "890a1b48d0a952b39c67e66c6c4fea9204bf0106", "46": "f22c3679e20aee7ef897c27c8b4560f2765b3229", "49": "111cf6d4f54ef712bfda5168068076665da33dd9", "50": "e3b995d06d2815bebe04570811673ccedb932803", "55": "83bacec292a2fca2f7b0eeb9e150fc5fc5f0398c", "57": "6e2f7dc4446a1f07037a9abb3d69001efacad808", "68": "e54d1f1d95ccfebbcc43052d0b43d67f3a1eca89", "88": "c3b989b59ec350b9221161183f18b2692585a031", "90": "433f2ffaf61e2e90dad72a8b672f9ac0fa281bb4", "117": "3799e1a67060743c921be498583f472ca6160bc1", "120": "8c686ba786ae42dd6852568c3333a898484c8a3d", "123": "7f198134003a01d1d2bed91ccf43c87d2a556aa7", "132": "06aaa6043820ccfa25c7a4d66510283f12e9e2d9", "137": "3b1e7d7018ce22f5d2c38ec4de49e0ac6d7ff409", "138": "d64aae505acc35cb5270a9b9fde7a6bfbdd13f64", "139": "658e39c9c679bd332a38f90d6d39bd781f1241c4", "150": "f52f4a3a0602440fb936ea0dc16648e84665fc36", "151": "1d4e289559ec3176b99aebdd33c51b06ccb7e4c1", "152": "6bbd19425b5b4be6566f4c1859c8a09b2431715f", "155": "f958fa5f9d06120efd1e4f1f8ada9241b5a8906c", "165": "39e3fb2b12512a322f29b29ccff9e218bb550a92", "168": "e26512c12429c0fb157ca592f67cd3097a417087", "169": "ac00379092e9d813847ed94bc0b1200d377f612a", "170": "a4e9e21a86e597e167151196d66f357cd5610547", "171": "fa42076772691efe56271bd44d2a474a4491018d", "173": "353959abf2e5b2f0eb082d1f4eebf90dfbdf7576", "174": "044d7beaf73df83091c5baf31904a2eaaeabb4bb", "175": "de124f6f8d87a37b631af9567d9347f7458eed29", "177": "08c4b8677569717da8718f460e8a2c915d22cc1d", "193": "266ebef553ecdcc7e5b23428eb6c801fc5e8bed0", "196": "23764955a8bdd5e79b8ee8101b962ef5749c7dad", "198": "ef93f6d1b0f7c13c7e3616df62ce9cc16c8357fd", "200": "e8bdd5e378174636aa0eca2ddd7f65d5776de970", "203": "0ef0544b80bdee4e35787f100933b9066a11c2db", "205": "5781ddff04fcfb1a63e2bbe353cdf6e0fc4ae701", "207": "0112783637884747f50b6852769caef691e31a82", "210": "f88183cff3f245f71a51030dc28e02e81eb575ba", "214": "3093166327f9bb611e73473b168e1588258f3d12", "221": "890e180233d63a190950e226bef2c4b50e5ac30a", "223": "a9590ded126384bbc12ea971ab01d1de1f6a1cff", "227": "ea4be79060835a6a4be2812fbbcedba4291fcbfd", "233": "50559e0e45b348b6a91c2124748b7bf1da5bd6ee", "234": "d6db87257cde858df1c27f7e8e65b7460620abfd", "236": "35d2e0e54212cb676df80728395efb6cd40f5331", "237": "c72a665df7a0f96577dac149a4d1bac6c3cdd6db", "239": "4b8fd171a1491ffd53536da42b70256a2ff5277d", "240": "e4c80090dbd62d7b249d5e2c09f5c5c31df54b83", "248": "c7af64c86793229081156e90bbef66212eef4ee9", "249": "38c391145eeee9d81397f0562d249ddede3fe624", "252": "b4b8ccdfaea6d8dfff7122043ea5abd71832df7e", "253": "78bede281272a4b609c203521dd26e723a04f0d8", "264": "a29e819d683fe8cdf39e0e4aca6a4ea8fdb335f4", "265": "60f85cf0f5895759641772c2b9bf9a94472a375b", "267": "44ce4bfeb796c2ffed0e15e09399443a4795d515", "268": "0466e94f5c5ad58c853a73257d80944a1607ac81", "272": "c611c8f7c90b36369236eeeac90a2b66a3c82dda", "274": "9ac0707be8551cfa7c1d348949529ea4ee981ff6", "276": "fa0cad8aa4bfa5e2d803ed68c820ad8d5d719075", "305": "e3b48c07cd692a7a4c70407497a0f9f71c824dc8", "326": "7787e38a003f979e5a0389c8492727a19add3821", "329": "80f01d4f7fcfe3f1e7a95feab5859935a55feee3", "473": "0d517ed839bdfaa99733c36168e108e9f8f74ce4", "531": "afba96519cce5db7515c2ff13cf7c2b548add652", "593": "2da996aba874ba4593fa53e7b012f0e9d5d9aabe", "599": "0c242b1a180e3fef489c2ef688e7579d7d949b7d", "612": "2b192437aae1264b534afd9e89e888e858f98e87", "615": "cd14205437ab17e3f7d4aea3265c8fea55585f0b", "622": "44104bcc00e93f905d14dbdb626cb5137be30d9d", "624": "c6d707036076b56c1d8d006f6cb5b8f1d35fa342", "649": "2c3ebc4935cd4078593caa338278392c2cd1c030", "652": "3cedfbc7268b679d9fd5476f4e6491ca6bbd1550"}, "revision_to_date": {"23": 1579789591000, "24": 1579798451000, "30": 1580745215000, "34": 1581423231000, "35": 1581518639000, "37": 1581590500000, "41": 1582037870000, "46": 1582880192000, "49": 1583919312000, "50": 1583920209000, "55": 1587029348000, "57": 1587479881000, "68": 1587727806000, "88": 1588255085000, "90": 1588255232000, "117": 1588844103000, "120": 1588868845000, "123": 1589103725000, "132": 1589220363000, "137": 1589357631000, "138": 1589357790000, "139": 1589360211000, "150": 1589562720000, "151": 1589563443000, "152": 1590589809000, "155": 1590600996000, "165": 1591903574000, "168": 1591948963000, "169": 1591951322000, "170": 1591952937000, "171": 1591954752000, "173": 1591955608000, "174": 1591956343000, "175": 1591959966000, "177": 1592493813000, "193": 1602589586000, "196": 1602596273000, "198": 1602596379000, "200": 1602607630000, "203": 1603798829000, "205": 1603970081000, "207": 1604674746000, "210": 1606311997000, "214": 1610387921000, "221": 1615404409000, "223": 1615461680000, "227": 1618853414000, "233": 1619969697000, "234": 1620123265000, "236": 1620204986000, "237": 1620204988000, "239": 1620205063000, "240": 1620205068000, "248": 1623336094000, "249": 1623339095000, "252": 1623345067000, "253": 1623345070000, "264": 1634311979000, "265": 1634311990000, "267": 1634314436000, "268": 1634315883000, "272": 1642621189000, "274": 1642621894000, "276": 1642625112000, "305": 1670950343000, "326": 1690973417000, "329": 1692625139000, "473": 1699280286000, "531": 1702460832000, "593": 1704297078000, "599": 1704798204000, "612": 1705076416000, "615": 1705415386000, "622": 1707844256000, "624": 1712932901000, "649": 1715864036000, "652": 1716226397000}, "params": {"arch": ["arm64"], "cpu": ["Apple M3"], "machine": ["Sofias-MacBook-Pro-SWC.local"], "num_cpu": ["8"], "os": ["Darwin 23.4.0"], "ram": ["17179869184"], "python": ["3.10"], "branch": ["HEAD"]}, "graph_param_list": [{"arch": "arm64", "cpu": "Apple M3", "machine": "Sofias-MacBook-Pro-SWC.local", "num_cpu": "8", "os": "Darwin 23.4.0", "ram": "17179869184", "python": "3.10", "branch": "HEAD"}], "benchmarks": {"cellfinder.TimeDetectAndClassifyCells.time_cellfinder_run": {"code": "class TimeDetectAndClassifyCells:\n    def time_cellfinder_run(self):\n        cellfinder_run(\n            self.signal_array,\n            self.background_array,\n            self.cfg.voxel_sizes,\n            self.cfg.start_plane,\n            self.cfg.end_plane,\n            self.cfg.trained_model,\n            self.cfg.model_weights,\n            self.cfg.model,\n            self.cfg.batch_size,\n            self.cfg.n_free_cpus,\n            self.cfg.network_voxel_sizes,\n            self.cfg.soma_diameter,\n            self.cfg.ball_xy_size,\n            self.cfg.ball_z_size,\n            self.cfg.ball_overlap_fraction,\n            self.cfg.log_sigma_size,\n            self.cfg.n_sds_above_mean_thresh,\n            self.cfg.soma_spread_factor,\n            self.cfg.max_cluster_size,\n            self.cfg.cube_width,\n            self.cfg.cube_height,\n            self.cfg.cube_depth,\n            self.cfg.network_depth,\n        )\n\n    def setup(self):\n        # basic setup\n        TimeBenchmark.setup(self)\n    \n        # add input data as arrays to the config\n        self.signal_array = read_with_dask(str(self.cfg._signal_dir_path))\n        self.background_array = read_with_dask(\n            str(self.cfg._background_dir_path)\n        )\n\nclass TimeBenchmark:\n    def setup_cache(self):\n        \"\"\"\n        Download the input data from the GIN repository to the local\n        directory specified in the default_config.json.\n    \n        Notes\n        -----\n        The `setup_cache` method only performs the computations once\n        per benchmark round and then caches the result to disk [1]_. It cannot\n        be parametrised [2]_. Therefore, if we sweep across different input\n        JSON files, we need to ensure all data for all configs is made\n        available with this setup function.\n    \n    \n        [1] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#setup-and-teardown-functions\n        [2] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#parameterized-benchmarks\n        \"\"\"\n    \n        # Check config file exists\n        assert Path(self.input_config_path).exists()\n    \n        # Instantiate a CellfinderConfig from the input json file\n        # (fetches data from GIN if required)\n        with open(self.input_config_path) as cfg:\n            config_dict = json.load(cfg)\n        config = CellfinderConfig(**config_dict)\n    \n        # Check paths to input data exist in config now\n        assert Path(config._signal_dir_path).exists()\n        assert Path(config._background_dir_path).exists()\n    \n        # Ensure cellfinder model is downloaded to default path\n        _ = prep_models(\n            model_weights_path=config.model_weights,\n            install_path=None,  # Use default,\n            model_name=config.model,\n        )", "min_run_count": 2, "name": "cellfinder.TimeDetectAndClassifyCells.time_cellfinder_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "cellfinder:89", "timeout": 3600, "type": "time", "unit": "seconds", "version": "bb8580e6a6610fa7a8603516c1e95fe96a3df06b308c64c43622814984ac2d18", "warmup_time": 0.1}, "cellfinder.TimeFullWorkflow.time_workflow": {"code": "class TimeFullWorkflow:\n    def time_workflow(self):\n        run_workflow_from_cellfinder_run(self.cfg)\n\nclass TimeBenchmark:\n    def setup(self):\n        \"\"\"\n        Run the cellfinder workflow setup steps.\n    \n        The command line input arguments are injected as dependencies.\n        \"\"\"\n    \n        # Run setup\n        cfg = setup_cellfinder_workflow(self.input_config_path)\n    \n        # Save configuration as attribute\n        self.cfg = cfg\n\n    def setup_cache(self):\n        \"\"\"\n        Download the input data from the GIN repository to the local\n        directory specified in the default_config.json.\n    \n        Notes\n        -----\n        The `setup_cache` method only performs the computations once\n        per benchmark round and then caches the result to disk [1]_. It cannot\n        be parametrised [2]_. Therefore, if we sweep across different input\n        JSON files, we need to ensure all data for all configs is made\n        available with this setup function.\n    \n    \n        [1] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#setup-and-teardown-functions\n        [2] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#parameterized-benchmarks\n        \"\"\"\n    \n        # Check config file exists\n        assert Path(self.input_config_path).exists()\n    \n        # Instantiate a CellfinderConfig from the input json file\n        # (fetches data from GIN if required)\n        with open(self.input_config_path) as cfg:\n            config_dict = json.load(cfg)\n        config = CellfinderConfig(**config_dict)\n    \n        # Check paths to input data exist in config now\n        assert Path(config._signal_dir_path).exists()\n        assert Path(config._background_dir_path).exists()\n    \n        # Ensure cellfinder model is downloaded to default path\n        _ = prep_models(\n            model_weights_path=config.model_weights,\n            install_path=None,  # Use default,\n            model_name=config.model,\n        )", "min_run_count": 2, "name": "cellfinder.TimeFullWorkflow.time_workflow", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "cellfinder:89", "timeout": 3600, "type": "time", "unit": "seconds", "version": "9077b77b0d342732ad697abe357267012fd9f4debceb4d514eed965934340958", "warmup_time": 0.1}, "cellfinder.TimeReadInputDask.time_read_background_with_dask": {"code": "class TimeReadInputDask:\n    def time_read_background_with_dask(self):\n        read_with_dask(str(self.cfg._background_dir_path))\n\nclass TimeBenchmark:\n    def setup(self):\n        \"\"\"\n        Run the cellfinder workflow setup steps.\n    \n        The command line input arguments are injected as dependencies.\n        \"\"\"\n    \n        # Run setup\n        cfg = setup_cellfinder_workflow(self.input_config_path)\n    \n        # Save configuration as attribute\n        self.cfg = cfg\n\n    def setup_cache(self):\n        \"\"\"\n        Download the input data from the GIN repository to the local\n        directory specified in the default_config.json.\n    \n        Notes\n        -----\n        The `setup_cache` method only performs the computations once\n        per benchmark round and then caches the result to disk [1]_. It cannot\n        be parametrised [2]_. Therefore, if we sweep across different input\n        JSON files, we need to ensure all data for all configs is made\n        available with this setup function.\n    \n    \n        [1] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#setup-and-teardown-functions\n        [2] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#parameterized-benchmarks\n        \"\"\"\n    \n        # Check config file exists\n        assert Path(self.input_config_path).exists()\n    \n        # Instantiate a CellfinderConfig from the input json file\n        # (fetches data from GIN if required)\n        with open(self.input_config_path) as cfg:\n            config_dict = json.load(cfg)\n        config = CellfinderConfig(**config_dict)\n    \n        # Check paths to input data exist in config now\n        assert Path(config._signal_dir_path).exists()\n        assert Path(config._background_dir_path).exists()\n    \n        # Ensure cellfinder model is downloaded to default path\n        _ = prep_models(\n            model_weights_path=config.model_weights,\n            install_path=None,  # Use default,\n            model_name=config.model,\n        )", "min_run_count": 2, "name": "cellfinder.TimeReadInputDask.time_read_background_with_dask", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "cellfinder:89", "timeout": 3600, "type": "time", "unit": "seconds", "version": "bbf9b70a8255c1d9f634c4ed7e6a09b5fcefb20927880e84e4bc03e5a5fefdc4", "warmup_time": 0.1}, "cellfinder.TimeReadInputDask.time_read_signal_with_dask": {"code": "class TimeReadInputDask:\n    def time_read_signal_with_dask(self):\n        read_with_dask(str(self.cfg._signal_dir_path))\n\nclass TimeBenchmark:\n    def setup(self):\n        \"\"\"\n        Run the cellfinder workflow setup steps.\n    \n        The command line input arguments are injected as dependencies.\n        \"\"\"\n    \n        # Run setup\n        cfg = setup_cellfinder_workflow(self.input_config_path)\n    \n        # Save configuration as attribute\n        self.cfg = cfg\n\n    def setup_cache(self):\n        \"\"\"\n        Download the input data from the GIN repository to the local\n        directory specified in the default_config.json.\n    \n        Notes\n        -----\n        The `setup_cache` method only performs the computations once\n        per benchmark round and then caches the result to disk [1]_. It cannot\n        be parametrised [2]_. Therefore, if we sweep across different input\n        JSON files, we need to ensure all data for all configs is made\n        available with this setup function.\n    \n    \n        [1] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#setup-and-teardown-functions\n        [2] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#parameterized-benchmarks\n        \"\"\"\n    \n        # Check config file exists\n        assert Path(self.input_config_path).exists()\n    \n        # Instantiate a CellfinderConfig from the input json file\n        # (fetches data from GIN if required)\n        with open(self.input_config_path) as cfg:\n            config_dict = json.load(cfg)\n        config = CellfinderConfig(**config_dict)\n    \n        # Check paths to input data exist in config now\n        assert Path(config._signal_dir_path).exists()\n        assert Path(config._background_dir_path).exists()\n    \n        # Ensure cellfinder model is downloaded to default path\n        _ = prep_models(\n            model_weights_path=config.model_weights,\n            install_path=None,  # Use default,\n            model_name=config.model,\n        )", "min_run_count": 2, "name": "cellfinder.TimeReadInputDask.time_read_signal_with_dask", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "cellfinder:89", "timeout": 3600, "type": "time", "unit": "seconds", "version": "a7498ff39fe61ef47e23010439a5cf3f835628791b4c78941eab852e4885574c", "warmup_time": 0.1}, "cellfinder.TimeSaveCells.time_save_cells": {"code": "class TimeSaveCells:\n    def time_save_cells(self):\n        save_cells(self.detected_cells, self.cfg._detected_cells_path)\n\n    def setup(self):\n        # basic setup\n        TimeBenchmark.setup(self)\n    \n        # add input data as arrays to config\n        self.signal_array = read_with_dask(str(self.cfg._signal_dir_path))\n        self.background_array = read_with_dask(\n            str(self.cfg._background_dir_path)\n        )\n    \n        # detect cells\n        self.detected_cells = cellfinder_run(\n            self.signal_array,\n            self.background_array,\n            self.cfg.voxel_sizes,\n            self.cfg.start_plane,\n            self.cfg.end_plane,\n            self.cfg.trained_model,\n            self.cfg.model_weights,\n            self.cfg.model,\n            self.cfg.batch_size,\n            self.cfg.n_free_cpus,\n            self.cfg.network_voxel_sizes,\n            self.cfg.soma_diameter,\n            self.cfg.ball_xy_size,\n            self.cfg.ball_z_size,\n            self.cfg.ball_overlap_fraction,\n            self.cfg.log_sigma_size,\n            self.cfg.n_sds_above_mean_thresh,\n            self.cfg.soma_spread_factor,\n            self.cfg.max_cluster_size,\n            self.cfg.cube_width,\n            self.cfg.cube_height,\n            self.cfg.cube_depth,\n            self.cfg.network_depth,\n        )\n\nclass TimeBenchmark:\n    def setup_cache(self):\n        \"\"\"\n        Download the input data from the GIN repository to the local\n        directory specified in the default_config.json.\n    \n        Notes\n        -----\n        The `setup_cache` method only performs the computations once\n        per benchmark round and then caches the result to disk [1]_. It cannot\n        be parametrised [2]_. Therefore, if we sweep across different input\n        JSON files, we need to ensure all data for all configs is made\n        available with this setup function.\n    \n    \n        [1] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#setup-and-teardown-functions\n        [2] https://asv.readthedocs.io/en/latest/writing_benchmarks.html#parameterized-benchmarks\n        \"\"\"\n    \n        # Check config file exists\n        assert Path(self.input_config_path).exists()\n    \n        # Instantiate a CellfinderConfig from the input json file\n        # (fetches data from GIN if required)\n        with open(self.input_config_path) as cfg:\n            config_dict = json.load(cfg)\n        config = CellfinderConfig(**config_dict)\n    \n        # Check paths to input data exist in config now\n        assert Path(config._signal_dir_path).exists()\n        assert Path(config._background_dir_path).exists()\n    \n        # Ensure cellfinder model is downloaded to default path\n        _ = prep_models(\n            model_weights_path=config.model_weights,\n            install_path=None,  # Use default,\n            model_name=config.model,\n        )", "min_run_count": 2, "name": "cellfinder.TimeSaveCells.time_save_cells", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "cellfinder:89", "timeout": 3600, "type": "time", "unit": "seconds", "version": "4f8eb229f78782fbbedb2db7c30c911f26e55fde3faaad090fe04a5f3da5598c", "warmup_time": 0.1}}, "machines": {"Sofias-MacBook-Pro-SWC.local": {"arch": "arm64", "cpu": "Apple M3", "machine": "Sofias-MacBook-Pro-SWC.local", "num_cpu": "8", "os": "Darwin 23.4.0", "ram": "17179869184", "version": 1}}, "tags": {"0.3.4rc3": 23, "v0.3.10": 55, "v0.3.11": 57, "v0.3.12": 88, "v0.3.12b": 90, "v0.3.14": 175, "v0.3.4": 24, "v0.3.5": 30, "v0.3.6rc0": 34, "v0.3.7": 35, "v0.3.8": 41, "v0.3.8rc0": 37, "v0.3.9": 50, "v0.3.9rc0": 46, "v0.3.9rc1": 49, "v0.7.0": 326, "v0.7.1": 329, "v0.8.0": 473, "v1.0.0": 531, "v1.1.0": 593, "v1.1.1": 599, "v1.1.2": 612, "v1.1.3": 615, "v1.1.4": 622, "v1.1.5": 624, "v1.2.0": 649, "v0.3.11b": 68, "v0.3.13rc0": 117, "v0.3.13rc1": 120, "v0.3.13rc2": 123, "v0.3.13rc3": 132, "v0.3.13rc4": 137, "v0.3.13rc5": 138, "v0.3.13": 139, "v0.3.14rc0": 150, "v0.3.14rc0b": 151, "v0.3.14rc1": 152, "v0.3.14rc2": 155, "v0.3.14rc3": 165, "v0.3.14rc5": 168, "v0.3.14rc6": 169, "v0.3.14rc6v2": 170, "v0.3.14rc6v3": 171, "v0.3.14rc7": 173, "v0.3.14rc8": 174, "v0.3.15rc0": 177, "v0.4.0a": 193, "v0.6.0": 196, "v0.4.2": 198, "v0.4.3": 200, "v0.4.4": 203, "v0.4.5": 205, "v0.4.6": 207, "v0.4.7": 210, "v0.4.8": 214, "v0.4.9": 221, "0.4.11": 223, "0.4.12": 227, "0.4.13-rc0": 233, "0.4.13": 234, "0.5.0-rc0": 236, "0.5.0": 237, "0.4.15-rc0": 239, "0.4.15": 240, "0.4.16-rc0": 248, "0.4.16": 249, "0.4.17-rc0": 252, "0.4.17": 253, "0.4.18-rc0": 264, "0.4.18": 265, "0.4.19-rc0": 267, "0.4.19": 268, "0.4.20-rc0": 272, "0.4.20-rc1": 274, "0.4.20": 276, "0.4.21": 305}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}